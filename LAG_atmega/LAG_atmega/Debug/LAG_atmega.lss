
LAG_atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000442  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000211  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d9  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000021b  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000228  00000000  00000000  0000111f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  74:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_default>

0000007c <__vector_default>:
		TCNT2=255-b;							//set start of countering
	}
}

ISR(BADISR_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
												// user code here
}
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <set_pin_high>:
		if (((b >> 7) & 0x01) == 0x01) PORTA |= Y_DIR_PIN; else PORTA &= ~Y_DIR_PIN;
		count2=(b & 0x7F) * 8;			//number of steps
	}
}

void set_pin_high(uint8_t pin) { PORTA |= pin; }
  90:	9b b3       	in	r25, 0x1b	; 27
  92:	89 2b       	or	r24, r25
  94:	8b bb       	out	0x1b, r24	; 27
  96:	08 95       	ret

00000098 <set_pin_low>:
void set_pin_low(uint8_t pin)  { PORTA &= ~pin; }
  98:	9b b3       	in	r25, 0x1b	; 27
  9a:	80 95       	com	r24
  9c:	98 23       	and	r25, r24
  9e:	9b bb       	out	0x1b, r25	; 27
  a0:	08 95       	ret

000000a2 <toggle_pin>:
void toggle_pin(uint8_t pin)   { PORTA ^= pin; }
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	89 27       	eor	r24, r25
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	08 95       	ret

000000aa <__vector_9>:
volatile char a,b;			//start counter values
uint16_t count0, count2;	//numbers of steps


ISR(TIMER0_OVF_vect) 
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	if(count0)
  cc:	80 91 63 00 	lds	r24, 0x0063
  d0:	90 91 64 00 	lds	r25, 0x0064
  d4:	89 2b       	or	r24, r25
  d6:	a9 f0       	breq	.+42     	; 0x102 <__vector_9+0x58>
	{
		toggle_pin(X_STEP_PIN);						//toggle x
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 51 00 	call	0xa2	; 0xa2 <toggle_pin>
		if(!(--count0)) set_pin_high(X_ENABLE_PIN);	//stepping is done, so disable 
  de:	80 91 63 00 	lds	r24, 0x0063
  e2:	90 91 64 00 	lds	r25, 0x0064
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	90 93 64 00 	sts	0x0064, r25
  ec:	80 93 63 00 	sts	0x0063, r24
  f0:	89 2b       	or	r24, r25
  f2:	19 f4       	brne	.+6      	; 0xfa <__vector_9+0x50>
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	0e 94 48 00 	call	0x90	; 0x90 <set_pin_high>
		TCNT0=255-a;							//set start of countering
  fa:	80 91 65 00 	lds	r24, 0x0065
  fe:	80 95       	com	r24
 100:	82 bf       	out	0x32, r24	; 50
	}
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_4>:

ISR(TIMER2_OVF_vect) 
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	if(count2)
 146:	80 91 61 00 	lds	r24, 0x0061
 14a:	90 91 62 00 	lds	r25, 0x0062
 14e:	89 2b       	or	r24, r25
 150:	a9 f0       	breq	.+42     	; 0x17c <__vector_4+0x58>
	{
		toggle_pin(Y_STEP_PIN);						//toggle x
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	0e 94 51 00 	call	0xa2	; 0xa2 <toggle_pin>
		if(!(--count2)) set_pin_high(Y_ENABLE_PIN);	//stepping is done, so disable
 158:	80 91 61 00 	lds	r24, 0x0061
 15c:	90 91 62 00 	lds	r25, 0x0062
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	90 93 62 00 	sts	0x0062, r25
 166:	80 93 61 00 	sts	0x0061, r24
 16a:	89 2b       	or	r24, r25
 16c:	19 f4       	brne	.+6      	; 0x174 <__vector_4+0x50>
 16e:	80 e2       	ldi	r24, 0x20	; 32
 170:	0e 94 48 00 	call	0x90	; 0x90 <set_pin_high>
		TCNT2=255-b;							//set start of countering
 174:	80 91 60 00 	lds	r24, 0x0060
 178:	80 95       	com	r24
 17a:	84 bd       	out	0x24, r24	; 36
	}
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <enable_motors>:
void set_pin_low(uint8_t pin)  { PORTA &= ~pin; }
void toggle_pin(uint8_t pin)   { PORTA ^= pin; }

void enable_motors(void)
{		
	set_pin_low(X_ENABLE_PIN);
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	0e 94 4c 00 	call	0x98	; 0x98 <set_pin_low>
	set_pin_low(Y_ENABLE_PIN);
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	0e 94 4c 00 	call	0x98	; 0x98 <set_pin_low>
 1aa:	08 95       	ret

000001ac <disable_motors>:
}

void disable_motors(void)
{
	set_pin_high(X_ENABLE_PIN);
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	0e 94 48 00 	call	0x90	; 0x90 <set_pin_high>
	set_pin_high(Y_ENABLE_PIN);
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	0e 94 48 00 	call	0x90	; 0x90 <set_pin_high>
 1b8:	08 95       	ret

000001ba <main>:



int main(void)
{
	DDRA=0xff;
 1ba:	cf ef       	ldi	r28, 0xFF	; 255
 1bc:	ca bb       	out	0x1a, r28	; 26
	PORTA=0;
 1be:	1b ba       	out	0x1b, r1	; 27
	disable_motors();
 1c0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <disable_motors>
	Timer0_Init();
 1c4:	0e 94 22 01 	call	0x244	; 0x244 <Timer0_Init>
	Timer2_Init();
 1c8:	0e 94 2a 01 	call	0x254	; 0x254 <Timer2_Init>
	USART_Init();
 1cc:	0e 94 32 01 	call	0x264	; 0x264 <USART_Init>
	a=255;						
 1d0:	c0 93 65 00 	sts	0x0065, r28
	b=255;
 1d4:	c0 93 60 00 	sts	0x0060, r28
	sei();
 1d8:	78 94       	sei
	while(1)
	{
		a=USART_Receive();		//receive start of countering from UASRT
 1da:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_Receive>
 1de:	80 93 65 00 	sts	0x0065, r24
		b=USART_Receive();		//receive start of countering from UASRT
 1e2:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_Receive>
 1e6:	80 93 60 00 	sts	0x0060, r24
		enable_motors();
 1ea:	0e 94 cf 00 	call	0x19e	; 0x19e <enable_motors>
		
		if (((a >> 7) & 0x01) == 0x01) PORTA |= X_DIR_PIN; else PORTA &= ~X_DIR_PIN;
 1ee:	80 91 65 00 	lds	r24, 0x0065
 1f2:	88 23       	and	r24, r24
 1f4:	14 f4       	brge	.+4      	; 0x1fa <main+0x40>
 1f6:	d8 9a       	sbi	0x1b, 0	; 27
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <main+0x42>
 1fa:	d8 98       	cbi	0x1b, 0	; 27
		count0=(a & 0x7F) * 8;				//number of steps
 1fc:	80 91 65 00 	lds	r24, 0x0065
 200:	8f 77       	andi	r24, 0x7F	; 127
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	90 93 64 00 	sts	0x0064, r25
 214:	80 93 63 00 	sts	0x0063, r24

		if (((b >> 7) & 0x01) == 0x01) PORTA |= Y_DIR_PIN; else PORTA &= ~Y_DIR_PIN;
 218:	80 91 60 00 	lds	r24, 0x0060
 21c:	88 23       	and	r24, r24
 21e:	14 f4       	brge	.+4      	; 0x224 <main+0x6a>
 220:	da 9a       	sbi	0x1b, 2	; 27
 222:	01 c0       	rjmp	.+2      	; 0x226 <main+0x6c>
 224:	da 98       	cbi	0x1b, 2	; 27
		count2=(b & 0x7F) * 8;			//number of steps
 226:	80 91 60 00 	lds	r24, 0x0060
 22a:	8f 77       	andi	r24, 0x7F	; 127
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	90 93 62 00 	sts	0x0062, r25
 23e:	80 93 61 00 	sts	0x0061, r24
	}
 242:	cb cf       	rjmp	.-106    	; 0x1da <main+0x20>

00000244 <Timer0_Init>:
 */ 
#include <avr/io.h>

void Timer0_Init(void)
{
	TCNT0 = 0;
 244:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<CS01)|(1<<CS00);
 246:	83 b7       	in	r24, 0x33	; 51
 248:	83 60       	ori	r24, 0x03	; 3
 24a:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 24c:	89 b7       	in	r24, 0x39	; 57
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	89 bf       	out	0x39, r24	; 57
 252:	08 95       	ret

00000254 <Timer2_Init>:
}


void Timer2_Init(void)
{
	TCNT2 = 0;
 254:	14 bc       	out	0x24, r1	; 36
	TCCR2 |= (1<<CS21)|(1<<CS20) ;
 256:	85 b5       	in	r24, 0x25	; 37
 258:	83 60       	ori	r24, 0x03	; 3
 25a:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<TOIE2);
 25c:	89 b7       	in	r24, 0x39	; 57
 25e:	80 64       	ori	r24, 0x40	; 64
 260:	89 bf       	out	0x39, r24	; 57
 262:	08 95       	ret

00000264 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>

void USART_Init(void)
{
	UCSRB|=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);	//RXCIE-interrupt reciver and RX/TX-enable
 264:	8a b1       	in	r24, 0x0a	; 10
 266:	88 69       	ori	r24, 0x98	; 152
 268:	8a b9       	out	0x0a, r24	; 10
	UBRRH=0;								//baudrate 9600 for 1MHz
 26a:	10 bc       	out	0x20, r1	; 32
	UBRRL=12;								//baudrate 9600 for 1MHz
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	89 b9       	out	0x09, r24	; 9
	UCSRA=(1<<U2X);							//double speed mode BAUD=fosc/8(UBRR+1)
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	8b b9       	out	0x0b, r24	; 11
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	//8-bit data,URSEL - writing UCRSC
 274:	86 e8       	ldi	r24, 0x86	; 134
 276:	80 bd       	out	0x20, r24	; 32
 278:	08 95       	ret

0000027a <USART_Receive>:
}


char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) );			//Wait for data to be received
 27a:	5f 9b       	sbis	0x0b, 7	; 11
 27c:	fe cf       	rjmp	.-4      	; 0x27a <USART_Receive>
	return UDR;								//Get and return received data from buffer
 27e:	8c b1       	in	r24, 0x0c	; 12
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
