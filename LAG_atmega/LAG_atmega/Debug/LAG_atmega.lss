
LAG_atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000230  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002e7  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001aa  00000000  00000000  000005d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c4  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c8  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c1  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 98 00 	call	0x130	; 0x130 <main>
  74:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_default>

0000007c <__vector_9>:
volatile char a,b;			//start counter values
uint16_t count0, count2;	//numbers of steps


ISR(TIMER0_OVF_vect) 
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	if(count0)
  8a:	80 91 63 00 	lds	r24, 0x0063
  8e:	90 91 64 00 	lds	r25, 0x0064
  92:	89 2b       	or	r24, r25
  94:	a1 f0       	breq	.+40     	; 0xbe <__vector_9+0x42>
	{
		PORTA^=X_STEP_PIN;						//toggle x
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	89 27       	eor	r24, r25
  9c:	8b bb       	out	0x1b, r24	; 27
		if(!(--count0)) PORTA|=X_ENABLE_PIN;	//stepping is done, so disable 
  9e:	80 91 63 00 	lds	r24, 0x0063
  a2:	90 91 64 00 	lds	r25, 0x0064
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	90 93 64 00 	sts	0x0064, r25
  ac:	80 93 63 00 	sts	0x0063, r24
  b0:	89 2b       	or	r24, r25
  b2:	09 f4       	brne	.+2      	; 0xb6 <__vector_9+0x3a>
  b4:	dc 9a       	sbi	0x1b, 4	; 27
		TCNT0=255-a;							//set start of countering
  b6:	80 91 65 00 	lds	r24, 0x0065
  ba:	80 95       	com	r24
  bc:	82 bf       	out	0x32, r24	; 50
	}
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <__vector_4>:

ISR(TIMER2_OVF_vect) 
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	if(count2)
  da:	80 91 61 00 	lds	r24, 0x0061
  de:	90 91 62 00 	lds	r25, 0x0062
  e2:	89 2b       	or	r24, r25
  e4:	a1 f0       	breq	.+40     	; 0x10e <__vector_4+0x42>
	{
		PORTA^=Y_STEP_PIN;						//toggle x
  e6:	9b b3       	in	r25, 0x1b	; 27
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	89 27       	eor	r24, r25
  ec:	8b bb       	out	0x1b, r24	; 27
		if(!(--count2)) PORTA|=Y_ENABLE_PIN;	//stepping is done, so disable
  ee:	80 91 61 00 	lds	r24, 0x0061
  f2:	90 91 62 00 	lds	r25, 0x0062
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	90 93 62 00 	sts	0x0062, r25
  fc:	80 93 61 00 	sts	0x0061, r24
 100:	89 2b       	or	r24, r25
 102:	09 f4       	brne	.+2      	; 0x106 <__vector_4+0x3a>
 104:	dd 9a       	sbi	0x1b, 5	; 27
		TCNT2=255-b;							//set start of countering
 106:	80 91 60 00 	lds	r24, 0x0060
 10a:	80 95       	com	r24
 10c:	84 bd       	out	0x24, r24	; 36
	}
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_default>:

ISR(BADISR_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
												// user code here
}
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:



int main(void)
{
	DDRA=0xff;
 130:	cf ef       	ldi	r28, 0xFF	; 255
 132:	ca bb       	out	0x1a, r28	; 26
	PORTA=0;
 134:	1b ba       	out	0x1b, r1	; 27
	Timer0_Init();
 136:	0e 94 bd 00 	call	0x17a	; 0x17a <Timer0_Init>
	Timer2_Init();
 13a:	0e 94 c5 00 	call	0x18a	; 0x18a <Timer2_Init>
	USART_Init();
 13e:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_Init>
	a=255;						
 142:	c0 93 65 00 	sts	0x0065, r28
	b=255;
 146:	c0 93 60 00 	sts	0x0060, r28
	sei();
 14a:	78 94       	sei
	while(1)
	{
		a=USART_Receive();		//receive start of countering from UASRT
		PORTA&=~X_ENABLE_PIN;	//enable
		count0=100;				//number of steps
 14c:	04 e6       	ldi	r16, 0x64	; 100
 14e:	10 e0       	ldi	r17, 0x00	; 0
		
		b=USART_Receive();		//receive start of countering from UASRT
		PORTA&=~Y_ENABLE_PIN;	//enable
		count2=200;				//number of steps
 150:	c8 ec       	ldi	r28, 0xC8	; 200
 152:	d0 e0       	ldi	r29, 0x00	; 0
	a=255;						
	b=255;
	sei();
	while(1)
	{
		a=USART_Receive();		//receive start of countering from UASRT
 154:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_Receive>
 158:	80 93 65 00 	sts	0x0065, r24
		PORTA&=~X_ENABLE_PIN;	//enable
 15c:	dc 98       	cbi	0x1b, 4	; 27
		count0=100;				//number of steps
 15e:	10 93 64 00 	sts	0x0064, r17
 162:	00 93 63 00 	sts	0x0063, r16
		
		b=USART_Receive();		//receive start of countering from UASRT
 166:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_Receive>
 16a:	80 93 60 00 	sts	0x0060, r24
		PORTA&=~Y_ENABLE_PIN;	//enable
 16e:	dd 98       	cbi	0x1b, 5	; 27
		count2=200;				//number of steps
 170:	d0 93 62 00 	sts	0x0062, r29
 174:	c0 93 61 00 	sts	0x0061, r28
 178:	ed cf       	rjmp	.-38     	; 0x154 <main+0x24>

0000017a <Timer0_Init>:
 */ 
#include <avr/io.h>

void Timer0_Init(void)
{
	TCNT0 = 0;
 17a:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<CS01)|(1<<CS00);
 17c:	83 b7       	in	r24, 0x33	; 51
 17e:	83 60       	ori	r24, 0x03	; 3
 180:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 182:	89 b7       	in	r24, 0x39	; 57
 184:	81 60       	ori	r24, 0x01	; 1
 186:	89 bf       	out	0x39, r24	; 57
 188:	08 95       	ret

0000018a <Timer2_Init>:
}


void Timer2_Init(void)
{
	TCNT2 = 0;
 18a:	14 bc       	out	0x24, r1	; 36
	TCCR2 |= (1<<CS21)|(1<<CS20) ;
 18c:	85 b5       	in	r24, 0x25	; 37
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<TOIE2);
 192:	89 b7       	in	r24, 0x39	; 57
 194:	80 64       	ori	r24, 0x40	; 64
 196:	89 bf       	out	0x39, r24	; 57
 198:	08 95       	ret

0000019a <USART_Init>:
#include <avr/io.h>
#include <stdio.h>

void USART_Init(void)
{
	UCSRB|=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);	//RXCIE-interrupt reciver and RX/TX-enable
 19a:	8a b1       	in	r24, 0x0a	; 10
 19c:	88 69       	ori	r24, 0x98	; 152
 19e:	8a b9       	out	0x0a, r24	; 10
	UBRRH=0;								//baudrate 9600 for 1MHz
 1a0:	10 bc       	out	0x20, r1	; 32
	UBRRL=12;								//baudrate 9600 for 1MHz
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
 1a4:	89 b9       	out	0x09, r24	; 9
	UCSRA=(1<<U2X);							//double speed mode BAUD=fosc/8(UBRR+1)
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	8b b9       	out	0x0b, r24	; 11
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	//8-bit data,URSEL - writing UCRSC
 1aa:	86 e8       	ldi	r24, 0x86	; 134
 1ac:	80 bd       	out	0x20, r24	; 32
 1ae:	08 95       	ret

000001b0 <USART_Receive>:
}


char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) );			//Wait for data to be received
 1b0:	5f 9b       	sbis	0x0b, 7	; 11
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <USART_Receive>
	return UDR;								//Get and return received data from buffer
 1b4:	8c b1       	in	r24, 0x0c	; 12
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
